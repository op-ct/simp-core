cdrom
keyboard --xlayouts=us
lang en_US

%include /mnt/install/repo/ks/dvd/include/common_ks_base

# ==============================================================================
%pre
# ==============================================================================

cd /mnt
# This is a horrible, horrible, hack to work around bugs in Anaconda.
if [ ! -d source ]; then
  mkdir -p source
fi
if [ `ls source | wc -l` -eq 0 ]; then
  mount -o bind install/repo source
fi

cp /mnt/install/repo/ks/repodetect.sh /tmp
cp /mnt/install/repo/ks/diskdetect.sh /tmp

/tmp/repodetect.sh `python -c "import ConfigParser; config = ConfigParser.ConfigParser(); config.read('/mnt/install/repo/.treeinfo'); print config.get('general','version')"`
/tmp/diskdetect.sh

# Prep for selecting the correct dracut to install
use_fips=`awk -F "fips=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

if [ "$use_fips" == "0" ]; then
  echo 'dracut' > /tmp/dracut_packages
else
  echo 'dracut-fips' > /tmp/dracut_packages
fi

# Copy scripts to be used by %post sections
cp /mnt/install/repo/ks/cryptsetup.sh /tmp
cp /mnt/install/repo/ks/dvd/sync_repos_to_iso.sh /tmp

%end

# ==============================================================================
%post --nochroot --erroronfail --log=/mnt/sysimage/var/log/anaconda/ks-post-nochroot.log
# ==============================================================================
# SOURCE is the DVD; SYSIMAGE is the chroot'd root dir
SOURCE="/mnt/source"
SYSIMAGE="/mnt/sysimage"

%include /tmp/crypt_setup.sh          # set up FDE, if necessary
%include /tmp/sync_repos_from_iso.sh  # try to sync RPM repos to local web server

# Don't care if this fails.
eject /tmp/cdrom || true

%end

# ==============================================================================
%post --log=/var/log/anaconda/ks-post.log
# ==============================================================================

# For the new binaries if they exist
export PATH="/opt/puppetlabs/bin:$PATH"

# FIPS
use_fips=`awk -F "fips=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

if [ "$use_fips" != "0" ]; then
  BOOTDEV=`df /boot | tail -1 | cut -f1 -d' '`

  # In case you need a working fallback
  DEFAULT_KERNEL_INFO=`/sbin/grubby --default-kernel`
  DEFAULT_INITRD=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep initrd | cut -f2 -d'='`
  DEFAULT_KERNEL_TITLE=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep -m1 title | cut -f2 -d'='`
  /sbin/grubby --copy-default --make-default --args="boot=${BOOTDEV} fips=1" --add-kernel=`/sbin/grubby --default-kernel` --initrd=${DEFAULT_INITRD} --title="FIPS ${DEFAULT_KERNEL_TITLE}"
fi

# For the disk crypto
if [ -f "/etc/.cryptcreds" ]; then
  echo 'install_items+="/etc/.cryptcreds"' >> /etc/dracut.conf
fi

for x in `ls -d /lib/modules/*`; do
  installed_kernel=`basename $x`
  dracut -f "/boot/initramfs-${installed_kernel}.img" $installed_kernel
done

sed -i 's/--class os/--class os --unrestricted/g' /boot/grub2/grub.cfg

ostype=`facter operatingsystem`
rhversion=`facter operatingsystemrelease`
majrhversion=`facter operatingsystemmajrelease`
htype=`facter architecture`

yum_root=/var/www/yum
os_maj_arch_dirs="$ostype/$rhversion/$htype"
repos_root="${yum_root}/${os_maj_arch_dirs}"
gpgkeys_root="${yum_root}/SIMP/GPGKEYS"

# Define simp_filesystem.repo
frhbase_gpg_file=''
case "$ostype" in
  RedHat) frhbase_gpg_file='file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-redhat-release'
    ;;
  CentOS) frhbase_gpg_file="file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-CentOS-$majrhversion"
    ;;
  *) echo "No '[frhbase]' GPG Keys are known for ostype '${ostype}'."
    exit 1
    ;;
esac


if [ -d "$repos_root/SIMP" ]; then
  cd "$repos_root/SIMP"

  # some repos are specific to the environment
  flocal_gpg_files=()

  if [ -n "$frhbase_gpg_file" ]; then
    flocal_gpg_files+=("$frhbase_gpg_file")
  fi

  if [ -e "$repos_root/SIMP-Dev/GPGKEYS/RPM-GPG-KEY-SIMP-Dev" ]; then
    flocal_gpg_files+=('file://${repos_root}/SIMP-Dev/GPGKEYS/RPM-GPG-KEY-SIMP-Dev')
  fi

  flocal_gpg_file_lines="$(IFS=$'\n'; echo "${flocal_gpg_files[*]}" | sed -e 's/^\([a-z]\)/    \1/g' -e '/^[[:space:]]*$/d')"

  cat << EOF >> /etc/yum.repos.d/simp_filesystem.repo
[flocal-$htype]
name=Local within the filesystem
baseurl=file://${repos_root}/SIMP
enabled=1
gpgcheck=1
gpgkey=file://${gpgkeys_root}/RPM-GPG-KEY-puppet
    file://${gpgkeys_root}/RPM-GPG-KEY-puppetlabs
    file://${gpgkeys_root}/RPM-GPG-KEY-SIMP-6
    file://${gpgkeys_root}/RPM-GPG-KEY-SIMP
    file://${gpgkeys_root}/RPM-GPG-KEY-PGDG-96
    file://${gpgkeys_root}/RPM-GPG-KEY-EPEL-$majrhversion
$flocal_gpg_file_lines

EOF
fi

  cat << EOF >> /etc/yum.repos.d/simp_filesystem.repo
[frhbase]
name=$ostype $rhversion base repo
baseurl=file://${repos_root}/baseos
enabled=1
gpgcheck=1
gpgkey=${frhbase_gpg_file}
EOF

if [ "$ostype" == "CentOS" ]; then
  sed -i '/enabled=/d' /etc/yum.repos.d/CentOS-Base.repo
  sed -i '/\[.*\]/ a\
enabled=0' /etc/yum.repos.d/CentOS-Base.repo
fi

yum clean all
yum -y --enablerepo=flocal-$htype --enablerepo=frhbase update

# Install GPG keys packaged with the ISO
for gpgkey in "$gpgkeys_root/"*; do
  rpm --import "$gpgkey"
done

if [ -n "$frhbase_gpg_file" ]; then
  rpm --import `echo $frhbase_gpg_file | sed 's/file:\/\///'`
fi

if [ -e /var/www/yum/SIMP-Dev/GPGKEYS/RPM-GPG-KEY-SIMP-Dev ]; then
  rpm --import /var/www/yum/SIMP-Dev/GPGKEYS/RPM-GPG-KEY-SIMP-Dev
fi

# Create 'simp' user
pass_hash='$6$5SnplwrFxmHy4j/v$WgcZV1.W6/wQq1SJh/gnV7E5Tr1iIuJgdCFmhdlzHnCdWR927Q/Q4eKZXtFAVOY7eNRb3e30ezM5xbmP8G7t50'

groupadd -g 1777 simp >& /dev/null
useradd -d /var/local/simp -g simp -m -p $pass_hash -s /bin/bash -u 1777 -K PASS_MAX_DAYS=90 -K PASS_MIN_DAYS=1 -K PASS_WARN_AGE=7 simp >& /dev/null
usermod -aG wheel simp
chage -d 0 root
chage -d 0 simp

pam_mod="password     requisite     pam_pwquality.so try_first_pass retry=3 reject_username enforce_for_root\n"
for auth_file in password system; do
  # A double check to make sure we're not running this on a managed system...
  if [ -f /etc/pam.d/${auth_file}-auth ] && [ -z `grep 'Puppet' /etc/pam.d/${auth_file}-auth` ]; then
    # Remove the items that will double prompt us out of the box
    sed -i "/pam_\(pwquality\|cracklib\).so/d" /etc/pam.d/${auth_file}-auth
    # Add our cracklib line
    sed -i "s/\(password.*pam_unix.so.*\)/${pam_mod}\1/" /etc/pam.d/${auth_file}-auth
  fi
done

if [ ! -f /etc/security/pwquality.conf ]  || [[ -f /etc/security/pwquality.conf  &&  -z `grep  'Puppet' /etc/security/pwquality.conf` ]]; then
  cat <<EOF > /etc/security/pwquality.conf
difok = 4
minlen = 15
dcredit = -1
ucredit = -1
lcredit = -1
ocredit = -1
minclass = 3
maxrepeat = 2
maxclassrepeat = 3
maxsequence = 4
gecoscheck = 1
EOF
fi

chmod 0644 /etc/security/pwquality.conf

simp_opt=`awk -F "simp_opt=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

#Runs a script on startup to retrieve openstack user-data and place it in whatever you specify $udlocation to be
if [ "$simp_opt" == "openstack" ]; then
  cat << EOF >> /etc/init.d/user-data
#!/bin/sh
udlocation="/var/simp/user-data"
udaddress="169.254.169.254"

case \$1 in
   start)
      echo "Retrieving user-data"
      mkdir -p '/var/simp'
      curl -k "https://\$udaddress/latest/user-data" > \$udlocation
      chmod 700 \$udlocation
      ;;
   restart)
      echo "Retrieving user-data"
      curl -k "https://\$udaddress/latest/user-data" > \$udlocation
      chmod 700 \$udlocation
      ;;
   status)
      if [ -f \$udlocation ]; then
        echo "\${udlocation} exists!"
      else
        echo "\${udlocation} does not exist..."
      fi
      ;;
  stop)
      echo "Nothing to do..."
      ;;
esac
EOF
   chmod 755 /etc/init.d/user-data
   ln -s /etc/init.d/user-data /etc/rc.d/rc3.d/S92user-data
   ln -s /etc/init.d/user-data /etc/rc.d/rc3.d/K92user-data
fi

# create marker file that indicates a SIMP ISO install
mkdir -p /etc/simp
echo "Kickstarted from SIMP ISO" > /etc/simp/.iso_install
%end
